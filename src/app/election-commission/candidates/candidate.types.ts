// types/candidate.types.ts

// Main Candidate interface - matches your backend structure
export interface Candidate {
  id: string;                    // Changed from number to string to match backend
  candidateId: string;           // Backend uses composite keys
  electionId?: string;           // Link to specific election
  candidateName: string;
  partyName: string;            // Backend field name
  partySymbol?: string;         // Party symbol/logo
  partyColor: string;           // Party color (hex code)
  candidateImage?: string;      // Candidate profile image
  isActive: boolean;            // Backend tracks active status - NOT user input
  email?: string;               // Optional contact info
  phone?: string;               // Optional contact info
  description?: string;         // Candidate bio/description
  createdAt?: string;           // Backend timestamps
  updatedAt?: string;           // Backend timestamps
}

// For creating new candidates - matches backend expectations
export interface CandidateConfig {
  candidateName: string;        // Required candidate name
  partyName: string;            // Required party affiliation
  partySymbol?: string;         // Optional party symbol
  partyColor: string;           // Required party color
  candidateImage?: string;      // Optional candidate image
  email?: string;               // Optional contact info
  phone?: string;               // Optional contact info
  description?: string;         // Optional candidate description
  // Note: isActive is NOT included - backend sets to false by default
  // Note: candidateId is generated by backend
}

// For updating existing candidates - all fields optional except what's being updated
export interface CandidateUpdate {
  candidateName?: string;
  partyName?: string;
  partySymbol?: string;
  partyColor?: string;
  candidateImage?: string;
  position?: number;
  email?: string;
  phone?: string;
  description?: string;
  // Note: isActive is managed automatically by the system, not user input
}

// Enhanced form data interface for UI components
export interface CandidateFormData {
  candidateName: string;        // Required
  partyName: string;           // Required  
  partyColor: string;          // Required - hex color code
  partySymbol?: string;        // Optional - URL or file path
  candidateImage?: string;     // Optional - URL or file path
  position?: number;           // Optional - ballot position
  email?: string;              // Optional
  phone?: string;              // Optional
  description?: string;        // Optional
  // isActive is NOT included - system managed
}

// Enhanced form data for editing (includes ID)
export interface CandidateEditFormData extends CandidateFormData {
  id: string;
  candidateId: string;
  currentlyActive: boolean;     // Read-only display field
}

// Enhanced Dialog component props with existing candidates for suggestions
export interface CandidateDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  candidate?: Candidate | null;
  onSubmit: (data: CandidateFormData) => Promise<void>;
  onCancel: () => void;
  isLoading?: boolean;
  existingCandidates?: Candidate[]; // New prop for party suggestions
}

// Table component props
export interface CandidateTableProps {
  candidates: Candidate[];
  onEdit: (candidate: Candidate) => void;
  onDelete: (candidateId: string) => void;
  onView?: (candidate: Candidate) => void;
  isLoading?: boolean;
  error?: Error | null;
}

// Enhanced table props for full-featured components
export interface CandidateTableEnhancedProps extends Omit<CandidateTableProps, 'candidates'> {
  itemsPerPage?: number;
  showRefresh?: boolean;
  showElectionFilter?: boolean;
  showPartyFilter?: boolean;
  showStatusFilter?: boolean;
  electionId?: string;
}

// For filtering and searching
export interface CandidateFilters {
  partyName?: string;
  electionId?: string;
  isActive?: boolean;
  search?: string;
  partyColor?: string;
}

// For statistics and analytics
export interface CandidateStats {
  totalCandidates: number;
  activeCandidates: number;
  inactiveCandidates: number;
  partiesCount: number;
  candidatesByParty: Record<string, number>;
  candidatesByElection: Record<string, number>;
  candidatesByStatus: {
    active: number;
    inactive: number;
  };
  candidatesWithImages: number;
  candidatesWithContact: number;
}

// Selection dialog props (for election candidate assignment)
export interface CandidateSelectionDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  candidates: Candidate[];
  selectedCandidates: Candidate[];
  onSelect: (candidates: Candidate[]) => void;
  maxSelections?: number;
  electionId?: string;
  title?: string;
  description?: string;
}

// For API response typing
export interface CandidateApiResponse {
  candidates: Candidate[];
  total: number;
  page?: number;
  limit?: number;
}

// For paginated candidate lists
export interface PaginatedCandidates {
  candidates: Candidate[];
  totalCount: number;
  currentPage: number;
  totalPages: number;
  hasNextPage: boolean;
  hasPreviousPage: boolean;
}

// Validation schemas
export interface CandidateValidationErrors {
  candidateName?: string;
  partyName?: string;
  partyColor?: string;
  email?: string;
  phone?: string;
  position?: string;
  general?: string;
}

// For bulk operations
export interface BulkCandidateOperation {
  candidateIds: string[];
  operation: 'delete' | 'updateParty' | 'updatePosition';
  targetPartyName?: string;
  targetPosition?: number;
  // Note: No activate/deactivate - system managed
}

// For candidate import/export
export interface CandidateImportData {
  candidateName: string;
  partyName: string;
  partyColor: string;
  partySymbol?: string;
  candidateImage?: string;
  email?: string;
  phone?: string;
  description?: string;
  position?: number;
}

export interface CandidateExportData extends Candidate {
  electionName?: string;
  partyDisplayName?: string;
  statusDisplay?: string;      // "Active in Election X" or "Inactive"
}

// For candidate comparison/analysis
export interface CandidateComparison {
  candidate1: Candidate;
  candidate2: Candidate;
  differences: string[];
  similarities: string[];
}

// Helper function types
export type CandidateValidator = (candidate: CandidateFormData) => CandidateValidationErrors;
export type CandidateFilter = (candidate: Candidate, filters: CandidateFilters) => boolean;

// React Query specific types
export interface UseCandidatesOptions {
  electionId?: string;
  enabled?: boolean;
  refetchInterval?: number;
  staleTime?: number;
}

export interface UseCandidatesMutationCallbacks {
  onSuccess?: (data: Candidate) => void;
  onError?: (error: Error) => void;
  onMutate?: () => void;
  onSettled?: () => void;
}

// Color validation
export const validateHexColor = (color: string): boolean => {
  return /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(color);
};

// Common party colors - for UI helper
export const COMMON_PARTY_COLORS = [
  '#FF0000', // Red
  '#0000FF', // Blue
  '#008000', // Green
  '#800080', // Purple
  '#FFA500', // Orange
  '#FFFF00', // Yellow
  '#FF69B4', // Pink
  '#00FFFF', // Cyan
  '#A52A2A', // Brown
  '#808080', // Gray
] as const;

// Helper interface for party suggestions
export interface PartySuggestion {
  partyName: string;
  partyColor: string;
  partySymbol?: string;
  candidateCount: number;
}
